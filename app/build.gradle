apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'

android {
    compileSdkVersion ver.compileSdkVersion
    buildToolsVersion ver.buildToolsVersion

    defaultConfig {
        applicationId "name.ilab.playground"
        minSdkVersion ver.minSdkVersion
        targetSdkVersion ver.targetSdkVersion
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    dataBinding {
        enabled = true
    }
}

//task annotationTask(type: Exec) {
//    commandLine 'cp', '../annotation/build/libs/annotation.jar', 'libs/'
//}
//
//annotationTask.dependsOn(':annotation:build')
//preBuild.dependsOn(annotationTask)

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')

    testCompile dep.junit

    compile dep.supportV4
    compile dep.supportAppCompatV7
    compile dep.supportRecyclerViewV7
    compile dep.supportDesign

    compile dep.rxJava
    compile dep.rxAndroid

    compile dep.retrofit
    compile dep.retrofitGsonConverter
    compile dep.retrofitRxJavaAdapter
    compile dep.okHttpLoggingInterceptor

    compile dep.dagger
    annotationProcessor dep.daggerCompiler

    annotationProcessor dep.autoValueCompiler
    provided dep.autoValueAnnotations
    provided dep.autoValueGson

    compile dep.butterKnife
    annotationProcessor dep.butterKnifeCompiler

    compile dep.rxBinding
    compile dep.rxBindingAppCompatV7
    compile dep.rxBindingDesign

    debugCompile dep.leakCanary
    releaseCompile dep.leadCanaryNoOp
    testCompile dep.leadCanaryNoOp

    compile project(':temp')
    compile project(':util')
    //        compile files('libs/annotation.jar')
}

import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

final def log = project.logger
final def variants = project.android.applicationVariants

variants.all { variant ->
    if (!variant.buildType.isDebuggable()) {
        log.debug("Skipping non-debuggable build type '${variant.buildType.name}'.")
        return;
    }

    JavaCompile javaCompile = variant.javaCompile
    javaCompile.doLast {
        String[] args = ["-showWeaveInfo",
                         "-1.5",
                         "-inpath", javaCompile.destinationDir.toString(),
                         "-aspectpath", javaCompile.classpath.asPath,
                         "-d", javaCompile.destinationDir.toString(),
                         "-classpath", javaCompile.classpath.asPath,
                         "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
        log.debug "ajc args: " + Arrays.toString(args)

        MessageHandler handler = new MessageHandler(true);
        new Main().run(args, handler);
        for (IMessage message : handler.getMessages(null, true)) {
            switch (message.getKind()) {
                case IMessage.ABORT:
                case IMessage.ERROR:
                case IMessage.FAIL:
                    log.error message.message, message.thrown
                    break;
                case IMessage.WARNING:
                    log.warn message.message, message.thrown
                    break;
                case IMessage.INFO:
                    log.info message.message, message.thrown
                    break;
                case IMessage.DEBUG:
                    log.debug message.message, message.thrown
                    break;
            }
        }
    }
}